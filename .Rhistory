while (counter <= nrow){
CityName <- gsub(' ','%20',test$CityName[counter]) #remove space for URLs
CountryCode <- test$Country[counter]
url <- paste(
"http://nominatim.openstreetmap.org/search?city="
, CityName
, "&countrycodes="
, CountryCode
, "&limit=9&format=json"
, sep="")
x <- fromJSON(url)
if(is.vector(x)){
test$lon[counter] <- x[[1]]$lon
test$lat[counter] <- x[[1]]$lat
}
counter <- counter + 1
}
View(x)
print(x)
x$lat
class(x)
x$lat
sapply(x,"[[",1)
sapply(x,"[[",6)
View(x)
sapply(x,"[[",[lat])
sapply(x,"[[",6)
sapply(x,[[, 7)
sapply(x,"[[", 7)
sapply(x,"[[",7)
nrow <- nrow(test)
counter <- 1
test$lon[counter] <- 0
test$lat[counter] <- 0
while (counter <= nrow){
CountryCode <- test$Country[counter]
url <- paste(
"http://nominatim.openstreetmap.org/search?city="
, CityName
, "&countrycodes="
, CountryCode
, "&limit=9&format=json"
, sep="")
x <- fromJSON(url)
if(is.vector(x)){
test$lon[counter] <- x[[1]]$lon
test$lat[counter] <- x[[1]]$lat
}
coords <- data.frame(lat = c(cbind(sapply(x,"[[",6))),
lon = c(
sapply(x,"[[",7))
counter <- counter + 1
nrow <- nrow(test)
counter <- 1
test$lon[counter] <- 0
test$lat[counter] <- 0
while (counter <= nrow){
CityName <- gsub(' ','%20',test$CityName[counter]) #remove space for URLs
CountryCode <- test$Country[counter]
url <- paste(
"http://nominatim.openstreetmap.org/search?city="
, CityName
, "&countrycodes="
, CountryCode
, "&limit=9&format=json"
, sep="")
x <- fromJSON(url)
if(is.vector(x)){
test$lon[counter] <- x[[1]]$lon
test$lat[counter] <- x[[1]]$lat
}
coords <- data.frame(lat = c(cbind(sapply(x,"[[",6))),
lon = c(
sapply(x,"[[",7)))
counter <- counter + 1
}
View(coords)
nrow <- nrow(test)
counter <- 1
test$lon[counter] <- 0
test$lat[counter] <- 0
while (counter <= nrow){
CityName <- gsub(' ','%20',test$CityName[counter]) #remove space for URLs
CountryCode <- test$Country[counter]
url <- paste(
"http://nominatim.openstreetmap.org/search?city="
, CityName
, "&countrycodes="
, CountryCode
, "&limit=9&format=json"
, sep="")
x <- fromJSON(url)
if(is.vector(x)){
test$lon[counter] <- x[[1]]$lon
test$lat[counter] <- x[[1]]$lat
}
coords <- data.frame(city = CityName,
lat = c(cbind(sapply(x,"[[",6))),
lon = c(
sapply(x,"[[",7)))
counter <- counter + 1
}
View(coords)
## Now test plot on map
m2_bounds_ZH_annotated_ROT <- m2_bounds_ZH %>% addCircles(data = coords)
View(coords)
## Now test plot on map
m2_bounds_ZH_annotated_ROT <- m2_bounds_ZH %>% addCircles(data = coords, lng = ~lon, lat = ~lat)
View(coords)
## Now test plot on map
m2_bounds_ZH_annotated_ROT <- m2_bounds_ZH %>% addCircles(data = coords, lng = ~lon, lat = ~lat)
is.numeric(coords$lat)
coords <- data.frame(city = CityName,
lat = c(cbind(as.numeric(sapply(x,"[[",6)))),
lon = c(as.numeric(
sapply(x,"[[",7))))
counter <- counter + 1
while (counter <= nrow){
CityName <- gsub(' ','%20',test$CityName[counter]) #remove space for URLs
CountryCode <- test$Country[counter]
url <- paste(
"http://nominatim.openstreetmap.org/search?city="
, CityName
, "&countrycodes="
, CountryCode
, "&limit=9&format=json"
, sep="")
x <- fromJSON(url)
if(is.vector(x)){
test$lon[counter] <- x[[1]]$lon
test$lat[counter] <- x[[1]]$lat
}
coords <- data.frame(city = CityName,
lat = c(cbind(as.numeric(sapply(x,"[[",6)))),
lon = c(as.numeric(
sapply(x,"[[",7))))
counter <- counter + 1
}
## Now test plot on map
m2_bounds_ZH_annotated_ROT <- m2_bounds_ZH %>% addCircles(data = coords, lng = ~lon, lat = ~lat)
m2_bounds_ZH_annotated_ROt
m2_bounds_ZH_annotated_ROT
## Now test plot on map
m2_bounds_ZH_annotated_ROT <- m2_bounds_ZH %>% addCircles(data = coords, lng = ~lon, lat = ~lat)
m2_bounds_ZH_annotated_ROT
View(coords)
View(coords)
View(coords)
source("~/.active-rstudio-document", echo=TRUE)
## Now test plot on map
m2_bounds_ZH_annotated_ROT <- m2_bounds_ZH %>% addCircles(data = coords, lng = ~lat, lat = ~lon)
m2_bounds_ZH_annotated_ROT
## Now test plot on map
m2_bounds_ZH_annotated_ROT <- m2_bounds_ZH %>% addCircles(data = coords, lng = ~lon, lat = ~lat)
m2_bounds_ZH_annotated_ROT
View(coords)
## define a function to retrieve longitude and latitude coordinates from dataframes (Dfs)
## containing A Cityname and City country column
## dummy DF containing only Rotterdam
test <- data.frame(CityName = c("Rotterdam"),
CountryCode = c("NL"))
nrow <- nrow(test)
counter <- 1
test$lon[counter] <- 0
test$lat[counter] <- 0
while (counter <= nrow){
CityName <- gsub(' ','%20',test$CityName[counter]) #remove space for URLs
CountryCode <- test$Country[counter]
url <- paste(
"http://nominatim.openstreetmap.org/search?city="
, CityName
, "&countrycodes="
, CountryCode
, "&limit=9&format=json"
, sep="")
x <- fromJSON(url)
if(is.vector(x)){
test$lon[counter] <- x[[1]]$lon
test$lat[counter] <- x[[1]]$lat
}
coords <- data.frame(city = CityName,
lat = c(cbind(as.numeric(sapply(x,"[[",6)))),
lon = c(as.numeric(
sapply(x,"[[",7))))
counter <- counter + 1
}
## Now test plot on map
m2_bounds_ZH_annotated_ROT <- m2_bounds_ZH %>% addCircles(data = coords, lng = ~lon, lat = ~lat)
m2_bounds_ZH_annotated_ROT
# Run the application
shinyApp(ui = UI, server = Server)
shiny::runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#library(shiny)
library(rlang)
library(shinydashboard)
library(shinydashboardPlus)
library(dashboardthemes)
library(readxl)
library(dplyr)
library(tidyverse)
library(shinyWidgets)
library(writexl)
library(DT)
library(data.table)
library(markdown)
library(shinyjs)
library(bslib)
library(shinyFeedback)
library(glue)
library(shinybrowser)
library(bslib)
library(spsComps)
###
source("Functions/rowCallback45.R")
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
shiny::runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
runApp('Alex/Sollicitatie DICA/sollicitatie_Alexander_Dank-main/sollicitatie_Alexander_Dank_DICA/Voorbeeld App')
cijfers_VWO <- tibble(
Schoolexamen = c(7.5, 5.0, 7.4, 7.2, 6.0, 6.4, 6.1, 5.4, 7.0),
Centraalexamen = c(7.4, 6.0, 7.1, 7.5, 6.4, 6.7, 5.7, 5.8 )
)
#load required packages
library(dplyr)
library(tidyverse)
cijfers_VWO <- tibble(
Schoolexamen = c(7.5, 5.0, 7.4, 7.2, 6.0, 6.4, 6.1, 5.4, 7.0),
Centraalexamen = c(7.4, 6.0, 7.1, 7.5, 6.4, 6.7, 5.7, 5.8 )
)
cijfers_VWO <- tibble(
Schoolexamen = c(7.5, 5.0, 7.4, 7.2, 6.0, 6.4, 6.1, 5.4, 7.0),
Centraalexamen = c(7.4, 6.0, 7.1, 7.5, 6.4, 6.7, 5.7, 5.8, 7.0 )
)
Cijfers_VWO %>% mutate(eindcijfer = (Schoolexamen+Centraalexamen)/2)
cijfers_VWO %>% mutate(eindcijfer = (Schoolexamen+Centraalexamen)/2)
cijfers_VWO <- cijfers_VWO %>% mutate(eindcijfer = (Schoolexamen+Centraalexamen)/2)
#totale gemiddelde cijfer
cijfers_VWO %>% summarize(mean_grade = mean(eindcijfer)) %>% pull(mean_grade)
## calculate whether there is a statistical difference between means of two groups
t.test(Schoolexamen ~ Centraalexamen, data = cijfers_VWO)
?t.test
## calculate whether there is a statistical difference between means of two groups
t.test(Schoolexamen ~ Centraalexamen, data = cijfers_VWO, alternative = c("two.sided"))
## calculate whether there is a statistical difference between means of two groups
t.test(Schoolexamen,cijfers_VWOCentraalexamen, data = cijfers_VWO, alternative = c("two.sided"))
## calculate whether there is a statistical difference between means of two groups
t.test(Schoolexamen, Centraalexamen, data = cijfers_VWO, alternative = c("two.sided"))
## calculate whether there is a statistical difference between means of two groups
t.test(cijfers_VWO$Schoolexamen, cijfers_VWO$Centraalexamen, alternative = c("two.sided"))
library(ggplot2)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=1)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=9)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=5)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=5) + coord_fixed()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=5) + coord_fixed(0,10)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=5) + coord_fixed()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=20) + coord_fixed()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=50) + coord_fixed()
sqrt(9)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=3) + coord_fixed()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=4) + coord_fixed()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=5) + coord_fixed()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=7) + coord_fixed()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) + geom_histogram(bins=4) + coord_fixed()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=4) +
xlim(0,10)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=3) +
xlim(0,10)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=10) +
xlim(0,10)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=2) +
xlim(0,10)
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=3) +
xlim(0,10)
?xlim
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=3) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5))
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=3) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5))
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=3) +
scale_x_continuous(0,10, breaks = seq(0, 10, by = 0.5))
?scale_x_continuous
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=3) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5), limits = c(0,10))
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=3) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5), limits = c(0,20))
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=20) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5), limits = c(0,10))
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=20) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5), limits = c(0,10)) +
theme_bw()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=10) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5), limits = c(0,10)) +
theme_bw()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=20) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5), limits = c(0,10)) +
theme_bw()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=30) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5), limits = c(0,10)) +
theme_bw()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=40) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5), limits = c(0,10)) +
theme_bw()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=20) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5)) +
theme_bw()
# make a  plot of the division of grades
ggplot(cijfers_VWO, aes(x=eindcijfer)) +
geom_histogram(bins=10) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5)) +
theme_bw()
cijfers_profieldeel <- tibble(
Schoolexamen = c( 7.2, 6.0, 6.4, 6.1, ),
Centraalexamen = c( 7.5, 6.4, 6.7, 5.7,  )
)
cijfers_profieldeel <- tibble(
Schoolexamen = c( 7.2, 6.0, 6.4, 6.1),
Centraalexamen = c( 7.5, 6.4, 6.7, 5.7)
)
cijfers_profieldeel <- cijfers_profieldeel %>% mutate(eindcijfer = (Schoolexamen+Centraalexamen)/2)
cijfers_profieldeel %>% summarize(mean_grade = mean(eindcijfer)) %>% pull(mean_grade)
ggplot(cijfers_VWO, aes(x=Schoolexamen, y=Centraalexamen)) + geom_point()
ggplot(cijfers_VWO, aes(x=Schoolexamen, y=Centraalexamen)) +
geom_point() + geom_smooth(se=FALSE, method = "lm")
ggplot(cijfers_VWO, aes(x=Schoolexamen, y=Centraalexamen)) +
geom_point() + geom_smooth(se=FALSE, method = "lm") + geom_abline(color="Green")
ggplot(cijfers_VWO, aes(x=Schoolexamen, y=Centraalexamen)) +
geom_point() + geom_smooth(se=FALSE, method = "lm") + geom_abline(color="Green", size=1)
ggplot(cijfers_VWO, aes(x=Schoolexamen, y=Centraalexamen)) +
geom_point() + geom_smooth(se=FALSE, method = "lm") + geom_abline(color="Green", linewidth=1)
lm(Schoolexamen ~ Centraalexamen, data=cijfers_VWO)
summary(lm(Schoolexamen ~ Centraalexamen, data=cijfers_VWO))
ggplot(cijfers_VWO, aes(x=Schoolexamen, y=Centraalexamen)) +
geom_point() + geom_smooth(se=FALSE, method = "lm")
ggplot(cijfers_VWO, aes(x=Schoolexamen, y=Centraalexamen)) +
geom_point() + geom_smooth(se=FALSE, method = "lm") + theme_bw()
ggplot(cijfers_VWO, aes(x=Schoolexamen, y=Centraalexamen)) +
geom_point() + geom_smooth(se=FALSE, method = "lm") + theme_bw() + geom_abline()
t.test(cijfers_VWO$Schoolexamen, cijfers_VWO$Centraalexamen, alternative = c("left"))
t.test(cijfers_VWO$Schoolexamen, cijfers_VWO$Centraalexamen, alternative = c("less"))
publishApp()
rsconnect::deployApp(upload = TRUE)
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo
rsconnect::setAccountInfo()
rsconnect::setAccountInfo(name='foodmicrobiologywur',
token='514CE524454080A59A616944FF821B72',
secret='<SECRET>')
rsconnect::setAccountInfo(name='foodmicrobiologywur',
token='514CE524454080A59A616944FF821B72',
secret='<SECRET>')
rsconnect::setAccountInfo(name='foodmicrobiologywur',
token='514CE524454080A59A616944FF821B72',
secret='<SECRET>')
rsconnect::setAccountInfo(name='foodmicrobiologywur',
token='514CE524454080A59A616944FF821B72',
secret='<SECRET>')
rsconnect::setAccountInfo(name='foodmicrobiologywur', token='514CE524454080A59A616944FF821B72', secret='<SECRET>')
rsconnect::setAccountInfo(name='foodmicrobiologywur',token='514CE524454080A59A616944FF821B72',secret='<SECRET>')
rsconnect::setAccountInfo(name='foodmicrobiologywur', token="514CE524454080A59A616944FF821B72", secret="4Qp990/eZdFjgKGQe4VPr7h03Ev0FoSWtcWigQTo")
rsconnect::setAccountInfo(name='foodmicrobiologywur',
token='6BB77190CCB9C1A4F2CD55B36BC36394',
secret='4Qp990/eZdFjgKGQe4VPr7h03Ev0FoSWtcWigQTo')
deployApp()
deployApp(appId = 8487645)
shiny::runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
### Product properties characteristics
PPC <- read_excel("HI_Microbial_hazards_identification_processed_database.xlsx", sheet = "Step_4_cardinal")
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
shiny::runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
PPC_GO <- read_excel("HI_Microbial_hazards_identification_processed_database.xlsx", sheet = "Step_4_GO")
shiny::runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
rm(list=ls())
runApp('Alex/MiID_app')
View(food_products)
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
runApp('Alex/MiID_app')
## load food products
food_products <- HI_Microbial_hazards_identification_processed_database <- read_excel("HI_Microbial_hazards_identification_processed_database.xlsx", sheet = "Step_1a_FPS")
setwd("~/Alex/MiID_app")
## load food products
food_products <- HI_Microbial_hazards_identification_processed_database <- read_excel("HI_Microbial_hazards_identification_processed_database.xlsx", sheet = "Step_1a_FPS")
rm(list=ls())
## load food products
food_products <- HI_Microbial_hazards_identification_processed_database <- read_excel("HI_Microbial_hazards_identification_processed_database.xlsx", sheet = "Step_1a_FPS")
View(food_products)
## input options food products
food_products <- food_products %>% mutate(optionnames = glue("{Food_item} ({Code}) [{Hierachy}]"))
View(food_products)
inputoptions <- str_to_sentence(food_products$Food_item)
unique(inputoptions)
names(inputoptions) <- str_to_sentence(food_products$optionnames)
unique(inputoptions)
#make list alphabetical
inputoptions <- sort(inputoptions)
unique(inputoptions)
selectfood <- inputoptions[53]
selected_category <- food_products %>% filter(str_to_sentence(Food_item) %in% selectedfood)
selectedfood <- inputoptions[53]
selected_category <- food_products %>% filter(str_to_sentence(Food_item) %in% selectedfood)
View(selected_category)
food_sub_categoryvec <- selected_category %>% pull(Food_subcategory_1)
## extract relevant hazards from categorie list
Hazard_counts <- food_categories %>% filter(Food_subcategory_1 %in% food_sub_categoryvec)
##load background excel sheet
## load the excel sheet for food categories
food_categories <- read_excel("HI_Microbial_hazards_identification_processed_database.xlsx",sheet = "Step_1b_HFP_subcategory")
## extract relevant hazards from categorie list
Hazard_counts <- food_categories %>% filter(Food_subcategory_1 %in% food_sub_categoryvec)
View(food_categories)
runApp()
deployApp(appId = 8487645)
library(rsconnect)
deployApp(appId = 8487645)
